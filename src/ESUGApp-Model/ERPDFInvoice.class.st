"
Description
-----------------------------------

I am a model of ERPDFInvoice, I generate a pdf document of invoive of an attendee.

Example
-----------------------------------

ERPDFInvoice pdfDocOf: groupOrAttendee.

this script generate a invoice file of an attendee
"
Class {
	#name : #ERPDFInvoice,
	#superclass : #Object,
	#instVars : [
		'controller'
	],
	#classInstVars : [
		'demoPath'
	],
	#category : #'ESUGApp-Model'
}

{ #category : #tool }
ERPDFInvoice class >> demoPath [
	^ demoPath ifNil: ['pdf/']
]

{ #category : #accessing }
ERPDFInvoice class >> demoPath: aString [
	demoPath := aString
]

{ #category : #'as yet unclassified' }
ERPDFInvoice class >> pdfDocOf: user [
	<script>
	| nameFile|
	nameFile := 'RegistrationInvoice_', user id, '.pdf'.
	^ self new templateRegistrationInvoice: (self streamNamed: nameFile) of: user
]

{ #category : #tool }
ERPDFInvoice class >> streamNamed: aName [
	| file |
	file := (self demoPath , aName) asFileReference.
	file parent ensureCreateDirectory.
	file ensureDelete.
	self flag: #todo.	"The next expression is a hack to correct a Pharo 6/7 compatibility.
	We need a binary write stream to print on but the way to get one changed between Pharo 6 and 7. To improve the code we could add a Pharo^ compatibility package that would add #binaryWriteStream to Pharo 6, but I have not time for now, I just want to make demos work.
	"
	^ SystemVersion current major < 7
		ifTrue: [ file writeStream
				binary;
				yourself ]
		ifFalse: [ file binaryWriteStream ]
]

{ #category : #'as yet unclassified' }
ERPDFInvoice class >> templateRegistrationInvoice: user [
	<script>
	| nameFile |
	nameFile := 'RegistrationInvoice_', user id, '.pdf'.
	self new templateRegistrationInvoice: (self streamNamed: nameFile) of: user.
	^ (self demoPath, nameFile) asFileReference
]

{ #category : #adding }
ERPDFInvoice >> addBorder: pdfPage [
	pdfPage add: (self lineElementFrom: 20 mm @ 115 mm to: 190 mm @ 115 mm);
	add: (self lineElementFrom: 20 mm @ 121 mm to: 190 mm @ 121 mm);
	add: (self lineElementFrom: 20 mm @ 115 mm to: 20 mm @ 137 mm);
	add: (self lineElementFrom: 20 mm @ 137 mm to: 190 mm @ 137 mm);
	add: (self lineElementFrom: 190 mm @ 115 mm to: 190 mm @ 137 mm);
	add: (self lineElementFrom: 20 mm @ 142 mm to: 190 mm @ 142 mm);
	add: (self lineElementFrom: 20 mm @ 157 mm to: 190 mm @ 157 mm);
	add: (self lineElementFrom: 20 mm @ 142 mm to: 20 mm @ 157 mm);
	add: (self lineElementFrom: 190 mm @ 142 mm to: 190 mm @ 157 mm).
]

{ #category : #adding }
ERPDFInvoice >> addDateInvoice: aPage [
	| fontInvoice |
	fontInvoice := PDFTimesFont size: 25pt.
	fontInvoice bold: true.
	aPage add: (PDFFormattedTextElement new
		textColor: self colorTitle;
		font: fontInvoice;
		dimension: 190 mm @ 20 mm;
		from: 0 mm @ 35 mm;
		text: 'Invoice';
		alignment: PDFAlignment right);
	add: (PDFFormattedTextElement new
		font: self fontContent;
		dimension: 190 mm @ 20 mm;
		from: 0 mm @ 48 mm;
		text: self dateToday;
		alignment: PDFAlignment right).
]

{ #category : #accessing }
ERPDFInvoice >> addFooter: pdfPage [
	pdfPage add: (PDFTextElement new
		textColor: self colorTitle;
		font: self fontFooter;
		from: 20 mm @ 276 mm;
		text: controller conference configuration organizer name);
	add: (PDFTextElement new
		textColor: self colorLink;
		font: self fontFooter;
		from: 20 mm @ 280 mm;
		text: controller conference configuration organizer webPageUrl);
	add: (PDFFormattedTextElement new
		textColor: self colorTitle;
		font: self fontFooter;
		dimension: 190 mm @ 3 mm;
		from: 0 mm @ 272 mm;
		text: controller conference configuration organizer fiscalSituation;
		alignment: PDFAlignment right);
	add: (PDFFormattedTextElement new
		font: self fontFooter;
		textColor: self colorTitle;
		dimension: 190 mm @ 3 mm;
		from: 0 mm @ 276 mm;
		text: controller conference configuration organizer addressString;
		alignment: PDFAlignment right).
]

{ #category : #adding }
ERPDFInvoice >> addHeader: aPage [
	self addInfoESUG: aPage.
	self addDateInvoice: aPage.
]

{ #category : #adding }
ERPDFInvoice >> addInfoESUG: aPage [
	| fontHeader |
	fontHeader := PDFTimesFont size: 10pt.
	aPage add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 45 mm;
		text: 'European Smalltalk User Group (ESUG)');
	add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 49 mm;
		text: 'Association Loi 1901 n W751167780');
	add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 53 mm;
		text: 'c/o Mr. StÃ©phane Ducasse');
	add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 57 mm;
		text: '1 rue Cesar Franck');
	add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 61 mm;
		text: '59800 Lille');
	add: (PDFTextElement new
		textColor: self colorTitle;
		font: fontHeader;
		from: 20 mm @ 65 mm;
		text: 'France');
	add: (PDFTextElement new
		textColor: self colorLink;
		font: fontHeader;
		from: 20 mm @ 69 mm;
		text: 'http://www.esug.org').
]

{ #category : #adding }
ERPDFInvoice >> addInfoInvoice: pdfPage of: user [
	| fullname |
	fullname := ((user firstName, ' ', user lastName) asText copyFrom: 1 to: 20) asString.
	pdfPage add: (PDFTextElement new
		textColor: self colorTitle;
		font: self fontContent;
		from: 20 mm @ 82 mm;
		text: 'Invoice No.');
	add: (PDFTextElement new
		font: self fontContent;
		from: 45 mm @ 82 mm;
		text: user invoiceNumber);
	add: (PDFFormattedTextElement new
		textColor: self colorTitle;
		font: self fontContent;
		dimension: (168 - fullname size) mm @ 70 mm;
		from: 0 mm @ 78 mm;
		text: 'Bill to:';
		alignment: (PDFAlignment right));
	add: (PDFFormattedTextElement new
		font: self fontContent;
		dimension: 190 mm @ 70 mm;
		from: 0 mm @ 78 mm;
		text: fullname;
		alignment: (PDFAlignment right));
	add: (PDFFormattedTextElement new
		font: self fontContent;
		dimension: 190 mm @ 75 mm;
		from: 0 mm @ 83 mm;
		text: user organizationName;
		alignment: (PDFAlignment right));
	add: (PDFFormattedTextElement new
		font: self fontContent;
		dimension: 190 mm @ 80 mm;
		from: 0 mm @ 88 mm;
		text: user organizationAddress1;
		alignment: (PDFAlignment right));
	add: (PDFFormattedTextElement new
		font: self fontContent;
		dimension: 190 mm @ 85 mm;
		from: 0 mm @ 93 mm;
		text: user organizationPostal, ' ', user organizationCity;
		alignment: (PDFAlignment right))
]

{ #category : #adding }
ERPDFInvoice >> addInfoPayment: pdfPage of: user [
	pdfPage
		add:
			(PDFTextElement new
				textColor: self colorTitle;
				font: self fontBoldContent;
				from: 20 mm @ 178 mm;
				text: 'Pay by Credit Card or Paypal:');
		add:
			(PDFTextElement new
				font: self fontContent;
				from: 30 mm @ 183 mm;
				text: 'Pay to our Paypal account');
		add:
			(PDFTextElement new
				textColor: self colorLink;
				font: self fontContent;
				from: 80 mm @ 183 mm;
				text: 'board@esug.org');
		add:
			(PDFTextElement new
				font: self fontContent;
				from: 30 mm @ 188 mm;
				text: 'More infos: ');
		add:
			(PDFTextElement new
				textColor: self colorLink;
				font: self fontContent;
				from: 55 mm @ 188 mm;
				text: 'http://www.esug.org/wiki/pier/About/SupportESUG');
		add:
			(PDFTextElement new
				textColor: self colorTitle;
				font: self fontBoldContent;
				from: 20 mm @ 196 mm;
				text: 'Pay by Bank Transfer:');
		add:
			(PDFDataTableElement new
				data: self valuesOfBankTransfer;
				font: self fontContent;
				from: 30 mm @ 202 mm;
				dimension: 160 mm @ 20 mm;
				style: #noBorder;
				yourself);
		add:
			(PDFTextElement new
				textColor: self colorTitle;
				font: self fontBoldContent;
				from: 20 mm @ 225 mm;
				text: 'Payment status:');
		add:
			(PDFTextElement new
				font: self fontContent;
				from: 30 mm @ 230 mm;
				text: (self paymentStatus: user))
]

{ #category : #templates }
ERPDFInvoice >> addPharoLogo: pharoLogo [
	^ (PDFJpegElement fromStream: pharoLogo readStream)
		from: 70 mm @ 10 mm;
		width: 60 mm
]

{ #category : #adding }
ERPDFInvoice >> addTablePayment: pdfPage of: user [
	| fontLegend currency |
	currency := 128 asCharacter asString , ' '
		, (user paymentAmount ifNil: [ 0 ]) asString.
	fontLegend := PDFTimesFont size: 10 pt.
	pdfPage
		add: (self dataTableOfDescriptionOfInvoiceWith: currency);
		add: (self dataTableOfTotalWith: currency);
		add: (self firstLineOfInvoiceDescriptionWith: fontLegend);
		add: (self secondLineOfInvoiceDescriptionWith: fontLegend)
]

{ #category : #colors }
ERPDFInvoice >> colorBorder [
	^ PDFColor r: 255 g: 255 b: 255
]

{ #category : #colors }
ERPDFInvoice >> colorLink [
	^ PDFColor r: 230 g: 0 b: 115
]

{ #category : #colors }
ERPDFInvoice >> colorTitle [
	^ PDFColor r: 0 g: 0 b: 128
]

{ #category : #accessing }
ERPDFInvoice >> controller: anObject [
	controller := anObject
]

{ #category : #adding }
ERPDFInvoice >> dataTableOfDescriptionOfInvoiceWith: currency [
	^ PDFDataTableWithColumnsCaptionElement new
		captions: #('Description' 'Total');
		data: (self valuesForTableWith: currency);
		from: 20 mm @ 115 mm;
		dimension: 170 mm @ 22 mm;
		customizationBlock: [ :cell :x :y :data | 
			y = 1
				ifTrue: [ x = 1
						ifTrue: [ cell dimension: 140 mm @ 4 mm ]
						ifFalse: [ cell dimension: 30 mm @ 4 mm ] ].
			x even
				ifTrue: [ cell alignment: PDFAlignment right ] ];
		style: #dataTableWithColoredCaption;
		yourself
]

{ #category : #adding }
ERPDFInvoice >> dataTableOfTotalWith: currency [
	^ PDFDataTableElement new
		data: (self valuesTotalTableWith: currency);
		from: 20 mm @ 142 mm;
		dimension: 170 mm @ 15 mm;
		customizationBlock: [ :cell :x :y :data | 
			y = 1
				ifTrue: [ x = 1
						ifTrue: [ cell
								textColor: self colorTitle;
								font: self fontBoldContent ] ]
				ifFalse: [ cell font: self fontFooter ] ];
		yourself
]

{ #category : #adding }
ERPDFInvoice >> dateToday [
	^ Date today monthName asString, ' ', Date today dayOfMonth asString, ', ', Date today year asString
]

{ #category : #adding }
ERPDFInvoice >> firstLineOfInvoiceDescriptionWith: fontLegend [
	^ PDFTextElement new
		font: fontLegend;
		from: 22 mm @ 158 mm;
		text: 'ESUG is a French Association of 1901 law (non-profit organization)'
]

{ #category : #fonts }
ERPDFInvoice >> fontBoldContent [
	^ (self fontContent) bold: true.
]

{ #category : #fonts }
ERPDFInvoice >> fontContent [
	^ PDFTimesFont size: 13pt.
]

{ #category : #fonts }
ERPDFInvoice >> fontFooter [
	^ PDFTimesFont size: 10 pt.
]

{ #category : #adding }
ERPDFInvoice >> lineElementFrom: aPoint1 to: aPoint2 [
	^ (PDFLineElement
		from: aPoint1
		to: aPoint2) drawColor: self colorTitle
]

{ #category : #adding }
ERPDFInvoice >> paymentStatus: user [
	user paymentInformation hasPaid 
		ifTrue: [ ^ 'Paid'].
		^ 'Unpaid'
]

{ #category : #adding }
ERPDFInvoice >> secondLineOfInvoiceDescriptionWith: fontLegend [
	^ PDFTextElement new
		font: fontLegend;
		from: 22 mm @ 163 mm;
		text:
			'and it is not subjected to VAT, "TVA non applicable - article 293 B du CGI".'
]

{ #category : #templates }
ERPDFInvoice >> templateRegistrationInvoice: aStream of: user [
	| pharoLogo pdfDoc pdfPage |
	controller := ERController new.
	pharoLogo := CssForLoginMDL new esugJpg.
	pdfDoc := PDFDocument new.
	pdfDoc styleSheet > #noBorder drawColor: self colorBorder.
	pdfDoc styleSheet > #noBorder > #cell alignment: PDFAlignment left.
	(pdfDoc styleSheet > #dataTableWithColoredCaption)
		font: self fontContent;
		drawColor: self colorBorder;
		margin: 10 pt.
	(pdfDoc styleSheet > #dataTableWithColoredCaption > #caption)
		font: (self fontContent bold: true);
		textColor: self colorTitle.
	pdfDoc styleSheet > #dataTableWithColoredCaption > #cell
		alignment: PDFAlignment left.
	pdfDoc styleSheet > #datatable drawColor: self colorBorder.
	(pdfDoc styleSheet > #datatable > #cell)
		font: self fontContent;
		alignment: PDFAlignment right;
		margin: 20 pt.
	pdfPage := PDFPage new.
	pdfPage add: (self addPharoLogo: pharoLogo).
	self addHeader: pdfPage.
	self addInfoInvoice: pdfPage of: user.
	self addTablePayment: pdfPage of: user.
	self addBorder: pdfPage.
	self addInfoPayment: pdfPage of: user.
	self addFooter: pdfPage.
	pdfDoc add: pdfPage.
	pdfDoc exportTo: aStream.
	^ pdfDoc
]

{ #category : #adding }
ERPDFInvoice >> valuesForTableWith: currency [
	^ Array
		with: (Array with: 'Full Registration to ESUG19' with: currency)
]

{ #category : #adding }
ERPDFInvoice >> valuesOfBankTransfer [
	^ Array
		with:
			(Array
				with: 'Account Owner:'
				with: controller conference fee bankAccountInformation owner)
		with:
			(Array
				with: 'Bank name:'
				with: controller conference fee bankAccountInformation bankInformation name)
		with:
			(Array
				with: 'IBAN:'
				with: controller conference fee bankAccountInformation iban)
		with:
			(Array
				with: 'BIC/SWIFT Code:'
				with: controller conference fee bankAccountInformation bankInformation bic)
]

{ #category : #adding }
ERPDFInvoice >> valuesTotalTableWith: currency [
	^ Array
		with: (Array with: 'Total to pay:' with: currency)
		with: (Array with: 'Not subjected to VAT' with: '')
		with: (Array with: 'Amounts are in Euro (EUR)' with: '')
]
